from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ..utils.logger import logger
from ..services.document_service import DocumentService
from ..services.news_service import NewsService
from ..services.term_service import TermService

class CommandHandler:
    """X·ª≠ l√Ω c√°c l·ªánh c·ªßa bot"""
    
    def __init__(self, api):
        self.document_service = DocumentService(api)
        self.news_service = NewsService(api)
        self.term_service = TermService(api)
        self.logger = logger

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /start"""
        try:
            welcome_message = (
                "üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot Tr·ª£ Gi√∫p Ph√°p L√Ω!\n\n"
                "Bot c√≥ th·ªÉ gi√∫p b·∫°n:\n"
                "üîç T√¨m ki·∫øm vƒÉn b·∫£n ph√°p lu·∫≠t\n"
                "üìö Tra c·ª©u thu·∫≠t ng·ªØ ph√°p l√Ω\n"
                "üì∞ Xem tin t·ª©c ph√°p lu·∫≠t m·ªõi\n\n"
                "S·ª≠ d·ª•ng /help ƒë·ªÉ xem danh s√°ch l·ªánh chi ti·∫øt"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("üîç T√¨m vƒÉn b·∫£n", callback_data='search'),
                    InlineKeyboardButton("üìö Thu·∫≠t ng·ªØ", callback_data='terms')
                ],
                [
                    InlineKeyboardButton("üì∞ Tin t·ª©c", callback_data='news'),
                    InlineKeyboardButton("‚ùì Tr·ª£ gi√∫p", callback_data='help')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_message, reply_markup=reply_markup)
            self.logger.info(f"User {update.effective_user.id} ƒë√£ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot")
        except Exception as e:
            self.logger.error(f"L·ªói trong l·ªánh /start: {str(e)}")
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /help"""
        try:
            help_text = (
                "üìö Danh s√°ch l·ªánh:\n\n"
                "/start - Kh·ªüi ƒë·ªông bot\n"
                "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y\n"
                "/search [t·ª´ kh√≥a] - T√¨m vƒÉn b·∫£n ph√°p lu·∫≠t\n"
                "/term [thu·∫≠t ng·ªØ] - Tra c·ª©u thu·∫≠t ng·ªØ ph√°p l√Ω\n"
                "/news - Xem tin t·ª©c ph√°p lu·∫≠t m·ªõi\n"
                "/latest - Xem vƒÉn b·∫£n m·ªõi ban h√†nh"
            )
            await update.message.reply_text(help_text)
            self.logger.info(f"User {update.effective_user.id} ƒë√£ xem tr·ª£ gi√∫p")
        except Exception as e:
            self.logger.error(f"L·ªói trong l·ªánh /help: {str(e)}")
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!")

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /search"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üîç Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm sau l·ªánh /search\n"
                    "V√≠ d·ª•: /search lu·∫≠t doanh nghi·ªáp"
                )
                return
                
            keyword = ' '.join(context.args)
            result = self.document_service.search(keyword)
            response = self.document_service.format_search_results(result)
            await update.message.reply_text(response)
            self.logger.info(f"User {update.effective_user.id} ƒë√£ t√¨m ki·∫øm: {keyword}")
        except Exception as e:
            self.logger.error(f"L·ªói trong l·ªánh /search: {str(e)}")
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm!")

    async def term_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /term"""
        try:
            if not context.args:
                terms = self.term_service.get_all_terms()
                response = self.term_service.format_terms_list(terms)
                await update.message.reply_text(response)
                return
                
            term = ' '.join(context.args).lower()
            result = self.term_service.search_term(term)
            response = self.term_service.format_term_result(result)
            await update.message.reply_text(response)
            self.logger.info(f"User {update.effective_user.id} ƒë√£ tra c·ª©u thu·∫≠t ng·ªØ: {term}")
        except Exception as e:
            self.logger.error(f"L·ªói trong l·ªánh /term: {str(e)}")
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra khi tra c·ª©u!")

    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /news"""
        try:
            result = self.news_service.get_latest_news()
            response = self.news_service.format_news_results(result)
            await update.message.reply_text(response)
            self.logger.info(f"User {update.effective_user.id} ƒë√£ xem tin t·ª©c")
        except Exception as e:
            self.logger.error(f"L·ªói trong l·ªánh /news: {str(e)}")
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y tin t·ª©c!")

    async def latest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /latest"""
        try:
            result = self.document_service.get_latest()
            response = self.document_service.format_search_results(result)
            await update.message.reply_text(response)
            self.logger.info(f"User {update.effective_user.id} ƒë√£ xem vƒÉn b·∫£n m·ªõi")
        except Exception as e:
            self.logger.error(f"L·ªói trong l·ªánh /latest: {str(e)}")
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra!")
